package be.ontrack;

import com.codename1.components.Accordion;
import com.codename1.components.SpanLabel;
import com.codename1.l10n.SimpleDateFormat;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.animations.Transition;
import com.codename1.ui.events.DataChangedListener;
import com.codename1.ui.layouts.*;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.spinner.Picker;
import com.codename1.util.DateUtil;
import com.codename1.util.StringUtil;


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class MyOnTrackApp extends Lifecycle {
    private DefaultListModel defaultListStations = new DefaultListModel();
    private ArrayList stationList = new ArrayList<>();
    private NMBSData nmbsData = new NMBSData();
    private AutoCompleteTextField textFieldVan = null;
    private AutoCompleteTextField textFieldNaar = null;
    private LanguageElementsName languageElementsName = new LanguageElementsName(AcceptedLanguages.nl);
    @Override
    public void runApp() {
        Form hi = new Form("On track", BoxLayout.y());

        getStationsNames();
        makeDefaultListModel();


        Picker pickerLanguage = new Picker();
        pickerLanguage.setType(Display.PICKER_TYPE_STRINGS);
        pickerLanguage.setStrings(AcceptedLanguages.nl.toString(), AcceptedLanguages.de.toString(), AcceptedLanguages.fr.toString(), AcceptedLanguages.en.toString());
        pickerLanguage.setSelectedString(AcceptedLanguages.nl.toString());
        hi.getToolbar().addComponent(BorderLayout.EAST, pickerLanguage);


        Button helloButton = new Button("button click here");
        hi.add(helloButton);

        Label labelVan = new Label(languageElementsName.getVan());
        textFieldVan = new AutoCompleteTextField(defaultListStations);

        Label labelNaar = new Label(languageElementsName.getNaar());
        textFieldNaar = new AutoCompleteTextField(defaultListStations);

        Button buttonSearch = new Button(languageElementsName.getZoek());

        pickerLanguage.addActionListener(actionEvent -> {
            nmbsData.setLanguage(AcceptedLanguages.valueOf(pickerLanguage.getText()));
            languageElementsName.setCurrentLang(AcceptedLanguages.valueOf(pickerLanguage.getText()));
            labelVan.setText(languageElementsName.getVan());
            labelNaar.setText(languageElementsName.getNaar());
            buttonSearch.setText(languageElementsName.getZoek());
            getStationsNames();
            makeDefaultListModel();
            hi.refreshTheme(true);
        });

        hi.add(labelVan);
        hi.add(textFieldVan);
        hi.add(labelNaar);
        hi.add(textFieldNaar);

        textFieldVan.addDataChangedListener(new DataChangedListener() {
            @Override
            public void dataChanged(int i, int i1) {
                String stationInput = textFieldVan.getText();
                if (!stationInput.isEmpty()){
                    stationInput = StringUtil.replaceFirst(stationInput, textFieldVan.getText().substring(0, 1), textFieldVan.getText().substring(0, 1).toUpperCase());
                }
                System.out.println("input: " + stationInput);
                textFieldVan.setText(stationInput);
                System.out.println("textfield: " + textFieldVan.getText());
            }
        });

        Picker pickerDate = new Picker();
        pickerDate.setType(Display.PICKER_TYPE_DATE);
        hi.add(pickerDate);
        Picker pickerTime = new Picker();
        pickerTime.setType(Display.PICKER_TYPE_TIME);
        pickerTime.setHourRange(0, 23);
        pickerTime.setMinuteStep(5);
        hi.add(pickerTime);

        helloButton.addActionListener(e -> hello());
        hi.getToolbar().addMaterialCommandToSideMenu("Menu item",
                FontImage.MATERIAL_CHECK, 4, e -> hello());
        hi.add(buttonSearch);


        buttonSearch.addActionListener(actionEvent -> {
            for (Component c:hi.getContentPane().getChildrenAsList(false)) {
                if (c.getClass().getSimpleName().equals("Accordion")){
                    c.remove();
                }
            }

            String date = "0" + StringUtil.replaceAll(pickerDate.getText(), "/", "");
            if (date.length() > 8){
                date = StringUtil.replaceFirst(date, "0", "");
            }
            date = date.substring(0, 4) + date.substring(6, 8);
            String time = StringUtil.replaceAll(pickerTime.getText(), ":", "");;

            ArrayList arrayListConn = (ArrayList) nmbsData.getTrainConn(textFieldVan.getText(), textFieldNaar.getText(), date, time).get("connection");
            for (Object oConn : arrayListConn) {
                HashMap hashMapConn = (HashMap) oConn;
                HashMap hashMapDep = (HashMap) hashMapConn.get("departure");
                HashMap hashMapStops = (HashMap) hashMapDep.get("stops");
                ComponentGroup cg = new ComponentGroup();
                if (hashMapStops != null){
                    Label numberOfStops = new Label("Stops: " + hashMapStops.get("number"));
                    cg.add(numberOfStops);
                }


                Accordion accordion = new Accordion();
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("HH:mm");
                Long epoch = Long.parseLong(hashMapDep.get("time").toString())*1000;
                Label labelTime = new Label(simpleDateFormat.format(epoch));
                Label labelSpoor = new Label(languageElementsName.getSpoor() + hashMapDep.get("platform"));
                ComponentGroup cgShortInfo = new ComponentGroup();
                cgShortInfo.add(labelTime).add(labelSpoor);
                accordion.addContent(cgShortInfo, cg);
                accordion.setScrollableY(false);
                hi.add(accordion);
            }
            hi.refreshTheme();
        });
        hi.setScrollableX(true);
        hi.show();
    }

    private void getStationsNames() {
        ArrayList arrayList = (ArrayList) nmbsData.getStations().get("station");
        stationList.clear();
        for (Object o : arrayList) {
            HashMap hashMap = (HashMap) o;
            stationList.add(hashMap.get("name").toString());
        }
    }

    private void makeDefaultListModel() {
        defaultListStations.removeAll();
        for (Object station:stationList) {
            String s = (String) station;
            defaultListStations.addItem(s);
        }
    }

    private void hello() {
        Dialog.show("Hello Codename One", "Welcome to Codename One", "OK", null);
    }

}
