package be.ontrack;

import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.events.DataChangedListener;
import com.codename1.ui.layouts.*;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.spinner.Picker;
import com.codename1.util.StringUtil;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class MyOnTrackApp extends Lifecycle {
    @Override
    public void runApp() {
        Form hi = new Form("On track", BoxLayout.y());
        Button helloButton = new Button("button click here");
        hi.add(helloButton);

        ArrayList stationList = new ArrayList<>();
        NMBSData nmbsData = new NMBSData(AcceptedLanguages.nl);
        ArrayList arrayList = (ArrayList) nmbsData.getStations().get("station");
        for (Object o : arrayList) {
            HashMap hashMap = (HashMap) o;
            stationList.add(hashMap.get("name").toString());
        }

        Label labelVan = new Label("Van:");
        DefaultListModel<String> defaultListStations = new DefaultListModel<>();
        for (Object station:stationList) {
            String s = (String) station;
            defaultListStations.addItem(s);
        }
        AutoCompleteTextField textFieldVan = new AutoCompleteTextField(defaultListStations);

        Label labelNaar = new Label("Naar:");
        AutoCompleteTextField textFieldNaar = new AutoCompleteTextField(defaultListStations);

        Button buttonSearch = new Button("Search");
        hi.add(labelVan);
        hi.add(textFieldVan);
        hi.add(labelNaar);
        hi.add(textFieldNaar);


        textFieldVan.addDataChangedListener(new DataChangedListener() {
            @Override
            public void dataChanged(int i, int i1) {
                String stationInput = textFieldVan.getText();
                if (!stationInput.isEmpty()){
                    stationInput = StringUtil.replaceFirst(stationInput, textFieldVan.getText().substring(0, 1), textFieldVan.getText().substring(0, 1).toUpperCase());
                }
                System.out.println("input: " + stationInput);
                textFieldVan.setText(stationInput);
                System.out.println("textfield: " + textFieldVan.getText());
            }
        });

        Picker pickerDate = new Picker();
        pickerDate.setType(Display.PICKER_TYPE_DATE);
        hi.add(pickerDate);
        Picker pickerTime = new Picker();
        pickerTime.setType(Display.PICKER_TYPE_TIME);
        hi.add(pickerTime);

        Picker pickerLanguage = new Picker();
        pickerLanguage.setType(Display.PICKER_TYPE_STRINGS);
        pickerLanguage.setStrings(AcceptedLanguages.nl.toString(), AcceptedLanguages.de.toString(), AcceptedLanguages.fr.toString(), AcceptedLanguages.en.toString());
        hi.getToolbar().addComponent();



        helloButton.addActionListener(e -> hello());
        hi.getToolbar().addMaterialCommandToSideMenu("Menu item",
                FontImage.MATERIAL_CHECK, 4, e -> hello());
        hi.add(buttonSearch);
        hi.show();
    }

    private void hello() {
        Dialog.show("Hello Codename One", "Welcome to Codename One", "OK", null);
    }

}
